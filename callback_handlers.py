import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import TYPE_CHECKING

from keyboards import BotKeyboards
from user_settings import UserSettings
from logger_config import BotLogger

if TYPE_CHECKING:
    from main import PDFSenderBot

logger = logging.getLogger(__name__)


class SettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    waiting_for_custom_time = State()
    waiting_for_page_number = State()


class CallbackHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    def __init__(self, bot_instance: 'PDFSenderBot'):
        self.bot = bot_instance
        self.user_settings = UserSettings()
        self.keyboards = BotKeyboards()

    async def handle_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = callback.data
            user_id = callback.from_user.id
            username = callback.from_user.username or "unknown"

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            BotLogger.log_user_action(user_id, username, f"callback: {data}")

            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –∑–∞–ø—Ä–æ—Å–æ–≤
            if data == "main_menu":
                await self._show_main_menu(callback)
            elif data == "settings_menu":
                await self._show_settings_menu(callback)
            elif data == "show_settings":
                await self._show_user_settings(callback)
            elif data == "set_pages_per_send":
                await self._show_pages_per_send_menu(callback)
            elif data.startswith("pages_per_send_"):
                await self._set_pages_per_send(callback, data)
            elif data == "set_schedule_time":
                await self._show_schedule_time_menu(callback)
            elif data.startswith("schedule_time_"):
                await self._set_schedule_time(callback, data)
            elif data == "custom_schedule_time":
                await self._request_custom_time(callback, state)
            elif data == "set_interval_hours":
                await self._show_interval_hours_menu(callback)
            elif data.startswith("interval_hours_"):
                await self._set_interval_hours(callback, data)
            elif data == "set_image_quality":
                await self._show_image_quality_menu(callback)
            elif data.startswith("image_quality_"):
                await self._set_image_quality(callback, data)
            elif data == "toggle_auto_send":
                await self._toggle_auto_send(callback)
            elif data == "toggle_notifications":
                await self._toggle_notifications(callback)
            elif data == "books_menu":
                await self._show_books_menu(callback)
            elif data == "next_pages":
                await self._send_next_pages(callback)
            elif data == "current_page":
                await self._show_current_page(callback)
            elif data == "goto_page":
                await self._request_page_number(callback, state)
            elif data.startswith("goto_page_"):
                await self._goto_specific_page(callback, data)
            elif data == "stats":
                await self._show_stats(callback)
            elif data == "help":
                await self._show_help(callback)
            # Administrative callbacks
            elif data == "stats":
                await self._show_stats(callback)
            elif data == "help":
                await self._show_help(callback)
            elif data == "admin_menu":
                await self._show_admin_menu(callback)
            elif data == "admin_users":
                await self._handle_admin_users(callback)
            elif data == "admin_system":
                await self._handle_admin_system(callback)
            elif data == "admin_logs":
                await self._handle_admin_logs(callback)
            elif data == "admin_backup":
                await self._handle_admin_backup(callback)
            elif data == "admin_cleanup":
                await self._handle_admin_cleanup(callback)
            elif data == "system_refresh":
                await self._handle_system_refresh(callback)
            elif data == "logs_refresh":
                await self._handle_logs_refresh(callback)
            elif data == "backup_create":
                await self._handle_backup_create(callback)
            elif data == "cleanup_run":
                await self._handle_cleanup_run(callback)
            elif data.startswith("mark_as_read_"):
                await self._mark_as_read(callback, data)
            elif data == "leaderboard":
                await self._show_leaderboard(callback)
            else:
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {callback.data}: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

    async def _show_main_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.message.edit_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.keyboards.main_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _show_admin_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
        admin_text = (
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞** üîß\n\n"
            "üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "/system - –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "/logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n"
            "/backup - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "/cleanup - –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤\n\n"
            "‚öôÔ∏è **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"
        )

        await callback.message.edit_text(
            admin_text,
            reply_markup=self.keyboards.admin_menu(),
            parse_mode="Markdown"
        )

    async def _handle_admin_users(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        await self.bot.users_command(callback.message)

    async def _handle_admin_system(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        await self.bot.system_command(callback.message)

    async def _handle_admin_logs(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
        await self.bot.logs_command(callback.message)

    async def _handle_admin_backup(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        await self.bot.backup_command(callback.message)

    async def _handle_admin_cleanup(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏"""
        await self.bot.cleanup_command(callback.message)

    async def _handle_system_refresh(self, callback: types.CallbackQuery):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        await self.bot.system_command(callback.message)

    async def _handle_logs_refresh(self, callback: types.CallbackQuery):
        """–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"""
        await self.bot.logs_command(callback.message)

    async def _handle_backup_create(self, callback: types.CallbackQuery):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        await self.bot.backup_command(callback.message)

    async def _handle_cleanup_run(self, callback: types.CallbackQuery):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É"""
        await self.bot.cleanup_command(callback.message)

    async def _show_settings_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await callback.message.edit_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=self.keyboards.settings_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _show_user_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = callback.from_user.id
        settings_text = self.user_settings.get_settings_summary(user_id)

        await callback.message.edit_text(
            settings_text,
            reply_markup=self.keyboards.settings_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _show_pages_per_send_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        user_settings = self.user_settings.get_user_settings(callback.from_user.id)
        current_pages = user_settings["pages_per_send"]

        await callback.message.edit_text(
            f"üìÑ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —Ä–∞–∑**\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_pages}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=self.keyboards.pages_per_send_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _set_pages_per_send(self, callback: types.CallbackQuery, data: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —Ä–∞–∑"""
        try:
            pages = int(data.split("_")[-1])
            user_id = callback.from_user.id

            if self.user_settings.update_user_setting(user_id, "pages_per_send", pages):
                await callback.message.edit_text(
                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —Ä–∞–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{pages}**",
                    reply_markup=self.keyboards.settings_menu(),
                    parse_mode="Markdown"
                )
                await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", show_alert=True)

    async def _show_schedule_time_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        user_settings = self.user_settings.get_user_settings(callback.from_user.id)
        current_time = user_settings["schedule_time"]

        await callback.message.edit_text(
            f"‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏**\n\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=self.keyboards.schedule_time_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _set_schedule_time(self, callback: types.CallbackQuery, data: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        time_value = data.split("_")[-1]
        user_id = callback.from_user.id

        if self.user_settings.update_user_setting(user_id, "schedule_time", time_value):
            await callback.message.edit_text(
                f"‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{time_value}**",
                reply_markup=self.keyboards.settings_menu(),
                parse_mode="Markdown"
            )
            await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

    async def _request_custom_time(self, callback: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        await callback.message.edit_text(
            "‚è∞ **–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM**\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 14:15",
            parse_mode="Markdown"
        )
        await state.set_state(SettingsStates.waiting_for_custom_time)
        await callback.answer()

    async def _show_interval_hours_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        user_settings = self.user_settings.get_user_settings(callback.from_user.id)
        current_interval = user_settings["interval_hours"]

        await callback.message.edit_text(
            f"üîÑ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏**\n\n–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
            reply_markup=self.keyboards.interval_hours_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _set_interval_hours(self, callback: types.CallbackQuery, data: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö"""
        try:
            hours = int(data.split("_")[-1])
            user_id = callback.from_user.id

            if self.user_settings.update_user_setting(user_id, "interval_hours", hours):
                await callback.message.edit_text(
                    f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **{hours} —á.**",
                    reply_markup=self.keyboards.settings_menu(),
                    parse_mode="Markdown"
                )
                await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", show_alert=True)

    async def _show_image_quality_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user_settings = self.user_settings.get_user_settings(callback.from_user.id)
        current_quality = user_settings["image_quality"]

        await callback.message.edit_text(
            f"üñºÔ∏è **–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n–¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {current_quality}%\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:",
            reply_markup=self.keyboards.image_quality_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _set_image_quality(self, callback: types.CallbackQuery, data: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            quality = int(data.split("_")[-1])
            user_id = callback.from_user.id

            if self.user_settings.update_user_setting(user_id, "image_quality", quality):
                await callback.message.edit_text(
                    f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{quality}%**",
                    reply_markup=self.keyboards.settings_menu(),
                    parse_mode="Markdown"
                )
                await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", show_alert=True)

    async def _toggle_auto_send(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É"""
        user_id = callback.from_user.id
        current_settings = self.user_settings.get_user_settings(user_id)
        current_value = current_settings["auto_send_enabled"]
        new_value = not current_value

        if self.user_settings.update_user_setting(user_id, "auto_send_enabled", new_value):
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            await callback.message.edit_text(
                f"‚úÖ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ **{status}**",
                reply_markup=self.keyboards.settings_menu(),
                parse_mode="Markdown"
            )
            await callback.answer(f"–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ {status}!")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

    async def _toggle_notifications(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        user_id = callback.from_user.id
        current_settings = self.user_settings.get_user_settings(user_id)
        current_value = current_settings["notifications_enabled"]
        new_value = not current_value

        if self.user_settings.update_user_setting(user_id, "notifications_enabled", new_value):
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            await callback.message.edit_text(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è **{status}**",
                reply_markup=self.keyboards.settings_menu(),
                parse_mode="Markdown"
            )
            await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

    async def _show_books_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏"""
        await callback.message.edit_text(
            "üìö **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.keyboards.books_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _send_next_pages(self, callback: types.CallbackQuery):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        user_id = callback.from_user.id
        user_settings = self.user_settings.get_user_settings(user_id)
        pages_per_send = user_settings["pages_per_send"]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data = self.bot.db.get_user_data(user_id)
        current_page = user_data.get("current_page", 1)

        await self.bot.send_pages_to_user(user_id, current_page)
        await callback.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {pages_per_send} —Å—Ç—Ä–∞–Ω–∏—Ü!")

    async def _show_current_page(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        user_id = callback.from_user.id
        user_data = self.bot.db.get_user_data(user_id)
        current_page = user_data.get("current_page", 1)
        total_pages = self.bot.pdf_reader.get_total_pages()

        await callback.message.edit_text(
            f"üìÑ **–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page} –∏–∑ {total_pages}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.keyboards.navigation_menu(current_page, total_pages),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _request_page_number(self, callback: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞"""
        total_pages = self.bot.pdf_reader.get_total_pages()
        await callback.message.edit_text(
            f"üîç **–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-{total_pages}):",
            parse_mode="Markdown"
        )
        await state.set_state(SettingsStates.waiting_for_page_number)
        await callback.answer()

    async def _goto_specific_page(self, callback: types.CallbackQuery, data: str):
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            page_number = int(data.split("_")[-1])
            user_id = callback.from_user.id

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.bot.db.set_current_page(user_id, page_number)

            await callback.answer(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}")
            await self._show_current_page(callback)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)

    async def _show_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = callback.from_user.id
        user_data = self.bot.db.get_user_data(user_id)
        current_page = user_data.get("current_page", 1)
        total_pages = self.bot.pdf_reader.get_total_pages()
        progress = (current_page / total_pages) * 100 if total_pages > 0 else 0

        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è**

üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page}
üìö –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_data.get('last_sent', '–ù–∏–∫–æ–≥–¥–∞')}
"""

        await callback.message.edit_text(
            stats_text,
            reply_markup=self.keyboards.main_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()

    async def _mark_as_read(self, callback: types.CallbackQuery, data: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é"""
        try:
            page_number = int(data.split("_")[-1])
            user_id = callback.from_user.id

            self.bot.db.mark_page_as_read(user_id, page_number)
            self.bot.db.add_points(user_id, 1)

            BotLogger.log_user_action(user_id, callback.from_user.username, f"mark_as_read: {page_number}")

            await callback.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è! +1 –æ—á–∫–æ!", show_alert=True)

        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _mark_as_read: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)

    async def _show_leaderboard(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        await self.bot.leaderboard_command(callback.message)
        await callback.answer()

    async def _show_help(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

ü§ñ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —Ä–∞–∑ (1-10)
‚Ä¢ –í—Ä–µ–º—è –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏

üì± **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
/next - –°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF
/book - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
/system - –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
/backup - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
/cleanup - –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"""

        await callback.message.edit_text(
            help_text,
            reply_markup=self.keyboards.main_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()